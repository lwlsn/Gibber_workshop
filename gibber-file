/*
Gibber Workshop 22/02 
*/

/*
0. Introduction

commands you might need... 
//[ctrl + return]  RUN 1 LINE OF CODE
// [alt/option + return] RUN MULTIPLE LINES OF CODE OF CODE
//[ctrl + period] STOP EVERYTHING

*/

// Let's start by making some sound (make sure your sound is not at full volume!)
Sine()

//Sine() is a function that plays a sine wave sound. By default, this will play at 440Hz i.e. will oscillate 440 times per second.
// This number determines how high or low we play the sound.

//What if we want to make this lower or higher? We can change the number in the bracket.

Sine(220)

Sine(880)


//Everytime the code is run, it will create a new instance of the sound. 

//Clear everything by pressing [ctrl + period]

//What if we just one sound to play and to update the pitch?  

/*
1. Creating a variable 
*/

a = Sine()

//now we can set its frequency without making a new synth

a.frequency = 220

//we can also change how loud or quiet is is 
a.amp = 0.1


//and if we want to stop it, there are two ways: 
a.disconnect()
//or
a._ 

//We can also do all of this in one line of code. 
a = Sine(440, 0.5)

// some other sounds, try changing the frequency and amplitude
a = Triangle()
a._

a = Square(440,0.1)
a._

/*
3. Making some synthesiser sounds and sequences
*/

// Next we'll create a "Synth" to play some notes. Clear all sound if any is currently running. 

//Play this to run your scale in note order
s = Synth()

//Running this code on its own doesn't make any sound. You need to give it some notes to play! 

s.note.seq([0,1,2,3,4,5,6,7],1/4)

s._

//We can make new synths like this

b = Synth({ maxVoices:4, waveform:'Triangle', attack:ms(1), decay:ms(1000) })

b.play( [440, 880, 1320], 1/8 ) //plays three notes, each with a duration of 1/4 of a note. 

//The square brackets here denote something called an array, which allow us to playback a sequence of notes. 

b._

//Another Fun Synth to try.

c = FM()
c.play( [1,2,3,4,7, -7], [1/8, 1/8, 1/16] )
	.cmRatio.seq ([2,1], 1/4)
	.attack = ms(1000)
	.decay = ms(1000)

//Try changing some of the numbers in here and see how the sound changes. 

//You can change the scale of the sound and the "root note" - where the scale starts from. 

Gibber.scale.mode="Major"
Gibber.scale.root="d4"


//Play with the sound by running this code and moving your mouse around the screen
c.cmRatio = Mouse.X
c.index = Mouse.Y

//Or you can just change this number
c.cmRatio = 0.1

c._

/*
3. Adding effects to the sound
*/

//Let's create another synth again
d = FM()
d.play( [1,3,5, 7,5,3,7], [1/8, 1/8, 1/16] )
	.cmRatio.seq ([2,1], 1/4)

//Now we can can add some reverb to the sound 
d.fx.add(Reverb())

//We could also add some delay by creating another variable

delay = Delay( 1/8, .1 ) // delay time and feedback

//now we add the effect to the synth
d.fx.add(delay)

//remove all effects

d.fx.remove()

//try new effects
d.fx.add(Distortion(10))


//stop it playing
d._


//You can find more effects in the reference.. https://gibber.cc/docs/index.html

//Try making your own sound sequences and adding effects to them! 

/*
4. Making some drum sounds
*/

/*
x : kick drum hit
o : snare drum hit
* : close hihat
- : open hihat
. : rest
*/

//The function Drums will playback the drum sounds. 
//basic drumbeat
x = Drums('xox-')

// or you can make it more exciting.. 
x = Drums('x*..ox*xo-')


//Change tempo - makes everything go faster or slower.

Clock.bpm = 140

//We can add effects to this drum-kit in the same way that we did with the synth! 


x.fx.add( Delay( 1/64) )  
x.fx.add( Distortion(1) )

x._

j = EDrums('. o', [1/4])
k = Kick().play( [40, 55, 110, 20].random(), [1/2, 1/4].random() ) 

k.fx.add( Delay( 1/64) )  
k.fx.add( Distortion(10) ) 


/* BONUS 
		-- ADD SOME VISUALS TO YOUR CODE!
*/


//Well done for making it this far. 

//Another cool thing that we can do in Gibber is add some visual effects to the music. 


m = Cube()// default color is white, or {r:1, g:1, b:1}
	m.color.r = 3    //change amount of red
	m.color.g = 3				//change green
	m.color.b = 3    		//change blue
  m.position.x.seq( [-50,0,50], ms(1000) )
  m.spin(0.005)
//change the values between 0 and 2, you can go higher but you lose contrast

//ANIMATING
// run this code, what happens?

//***COPY AND PASTE TO MAKE ANOTHER ONE


n = Cube()// default color is white, or {r:1, g:1, b:1}
	n.color.r = 3   //change amount of red
	n.color.g = 3				//change green
	n.color.b = 3   		//change blue
  n.position.y.seq( [-50,0,50], ms(500) )
  n.spin(0.01)
//change the values between 0 and 2, you can go higher but you lose contrast

//MAPPINGS
a = Knot()
b = Dots() // halftone shader
b.scale = Mouse.X // size of dots to x position
b.angle = Mouse.Y // angle of dot placement to y
  
//ANIMATING
 // run this code, what happens?

//How fast can it go?
//How would you make it moving??


//BUILT IN SHADERS or POST PROCESSING

f = Focus(500, 278, 200, 0)






